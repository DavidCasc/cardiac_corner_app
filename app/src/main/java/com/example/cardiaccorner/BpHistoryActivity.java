package com.example.cardiaccorner;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.content.SharedPreferences;
import android.view.View;
import android.os.Bundle;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.SearchView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.material.chip.Chip;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import org.w3c.dom.Text;

import java.lang.reflect.Type;
import java.util.ArrayList;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 * The BpHistoryActivity is now known as the list view. This class
 * populates the list view as well as creates funtionality to the searching
 *
 * @Authors: David Casciano and Laura Reid
 */
public class BpHistoryActivity extends AppCompatActivity {

    // Data storage variables
    int systolic;
    int diastolic;
    String username;

    //Page Element Variables
    ImageView searchIcon;
    TextView searchView;
    Button backBtn;
    RecyclerView recyclerView;
    RecyclerAdapter recyclerAdapter;

    //Shared Preference
    static final String SHARED_PREFS = "cardiacCornerPrefs";

    /**
     * Properly handle the back button being pressed
     * This will bring the user back to the list view activity
     */
    @Override
    public void onBackPressed() {
        super.onBackPressed();
        Intent i = new Intent(BpHistoryActivity.this, MainActivity.class);
        startActivity(i);
    }

    /**
     * Create a function to pull the data from the local store or shared preferences
     * @param Key the string value of the key
     * @return the string value of the data requested
     */
    public String loadData(String Key) {
        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
        return sharedPreferences.getString(Key, "");
    }

    /**
     * Check if the logs are actually stored
     * @return a boolean representation of if the logs actually are stored
     */
    public Boolean logsStored(){
        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
        return sharedPreferences.contains("logs");
    }

    /**
     * Format the logs from an arraylist to a serialized string.
     * @param log an arraylist value of the logs
     */
    public void storeLogs(ArrayList<Entry> log){
        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        Gson gson = new Gson();
        String arr = gson.toJson(log);
        editor.putString("logs", arr);
        editor.commit();
    }

    /**
     * Retrieve the logs from the local store
     * @return an arraylist value of the logs stored
     */
    public ArrayList<Entry> retrieveLogs(){
        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
        Gson gson = new Gson();
        String arr = sharedPreferences.getString("logs", null);
        Type type = new TypeToken<ArrayList<Entry>>() {}.getType();

        ArrayList<Entry> log = gson.fromJson(arr, type);

        if (log == null) {
            log = new ArrayList<Entry>();
        }

        return log;
    }

    ArrayList<Entry> logs; //Initialized the logs array

    /**
     * Autogenerated the onCreate function which would handle the attach
     * the listeners to the elements
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        username = loadData("username");
        super.onCreate(savedInstanceState);

        //Select the layout XML
        setContentView(R.layout.bp_history_screen);

        //Get the page elements
        searchView = (TextView) findViewById(R.id.SearchText);
        searchIcon = (ImageView) findViewById(R.id.SearchIcon);
        backBtn = (Button) findViewById(R.id.back_button);

        //Get the extras which is the information from the previous activity
        Bundle bundle = getIntent().getExtras();

        //If there is no bundle fetch from local if not get the information passed through
        if(bundle != null && bundle.getSerializable("entries") != null){
            ArrayList<Entry> entries = (ArrayList<Entry>) bundle.getSerializable("entries");
            logs = entries;
        } else {
            if (!logsStored()) {
                fetchLogs();
            }
            logs = retrieveLogs();
        }

        System.out.println(logs);


        //Create a listener to go backwards
        backBtn.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //Go back to the list view
                        Intent i = new Intent(BpHistoryActivity.this,MainActivity.class);
                        startActivity(i);

                    }
                });


        //Create a listener to search based on the search string
        searchIcon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //clear the current logs
                logs.clear();

                //enumerate through the historic logs and see if the search element matches the logs
                for(Entry e: retrieveLogs()){
                    if(String.valueOf(e.getDia_measurement()).contains(searchView.getText().toString())){
                        logs.add(e);
                    } else if (String.valueOf(e.getSys_measurement()).contains(searchView.getText().toString())){
                        logs.add(e);
                    } else if (e.getTime_created().contains(searchView.getText().toString())){
                        logs.add(e);
                    } else if (searchView.getText().toString().toLowerCase().equals("sodium") && e.isSodium()){
                        logs.add(e);
                    } else if (searchView.getText().toString().toLowerCase().equals("stress") && e.isStress()){
                        logs.add(e);
                    } else if (searchView.getText().toString().toLowerCase().equals("exercise") && e.isExercise()){
                        logs.add(e);
                    }
                }
                //Notify the data has changes
                recyclerAdapter.notifyDataSetChanged();
            }
        });


        //Set up the recyclerview element which will scroll through historic logs
        recyclerView = (RecyclerView) findViewById(R.id.logScroll);
        recyclerAdapter = new RecyclerAdapter(this, logs);
        recyclerView.setAdapter(recyclerAdapter);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

    }

    /**
     * Use Retrofit2 to get the logs from the server and store them in the
     * logs variable
     */
    public void fetchLogs() {
        Call<LogsResponse> logsRequestCall = ApiClient.getUserService().fetchLogs(username);
        logsRequestCall.enqueue(new Callback<LogsResponse>() {
            @Override
            public void onResponse(Call<LogsResponse> call, Response<LogsResponse> response) {
                storeLogs(response.body().getLogs());
            }

            @Override
            public void onFailure(Call<LogsResponse> call, Throwable t) {
                Toast.makeText(BpHistoryActivity.this, "Failure", Toast.LENGTH_LONG).show();
            }
        });

    }

    /**
     * Debugging and development funcions
     */
    private void printSystolicValue()
    {
        TextView textView = (TextView) findViewById(R.id.systolic);

        if(systolic == 0){
            textView.setText(null);
        } else{
            textView.setText(String.valueOf(systolic));
        }
    }

    private void printDiastolicValue()
    {
        TextView textView = (TextView) findViewById(R.id.diastolic);

        if(diastolic == 0){
            textView.setText(null);
        } else{
            textView.setText(String.valueOf(diastolic));
        }
    }

    /**
     * Use the onResume function to invalidate and refresh the dataset
     */
    @Override
    protected void onResume() {
        super.onResume();
        recyclerAdapter.notifyDataSetChanged();
    }
}
