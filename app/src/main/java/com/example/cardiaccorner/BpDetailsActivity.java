package com.example.cardiaccorner;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.google.android.material.chip.Chip;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 * The BpDetailsActivity class is used to display information
 * from the database associated with one specific entry.
 *
 * @Authors: David Casciano and Laura Reid
 */
public class BpDetailsActivity extends AppCompatActivity {

    //Page Element Variables
    Chip sodiumChip, stressChip, exerciseChip;
    Button deleteBtn;
    Button backBtn;

    //Entry Variable
    Entry entry;

    //Shared Preference
    static final String SHARED_PREFS = "cardiacCornerPrefs";

    /**
     * Autogenerated the onCreate function which would handle the attach
     * the listeners to the elements
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.bp_details_screen);

        //Create a listener to go backwards
        backBtn = (Button) findViewById(R.id.back_button);
        backBtn.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent i = new Intent(BpDetailsActivity.this,BpHistoryActivity.class);
                        startActivity(i);
                    }
                });

        //Set objects to their correct parameters
        TextView notesText = (TextView) findViewById(R.id.notes_text);
        TextView dateText = (TextView) findViewById(R.id.date_text);
        sodiumChip = (Chip) findViewById(R.id.chip1_card);
        stressChip = (Chip) findViewById(R.id.chip2_card);
        exerciseChip = (Chip) findViewById(R.id.chip3_card);
        TextView systolic = (TextView) findViewById(R.id.systolic);
        TextView diastolic = (TextView) findViewById(R.id.diastolic);
        deleteBtn = (Button) findViewById(R.id.delete);


        Bundle bundle = getIntent().getExtras();

        //Get blood pressure entry data
        if(bundle.getSerializable("entry")!= null)
        {
            entry = (Entry) bundle.getSerializable("entry");
        }

        System.out.println(entry);

        //Fill objects with data from entry
        notesText.setText(entry.getNotes());
        dateText.setText(entry.getTime_created());
        sodiumChip.setChecked(entry.isSodium());
        stressChip.setChecked(entry.isStress());
        exerciseChip.setChecked(entry.isExercise());

        //Prevents the chips from having their values changable
        sodiumChip.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if(sodiumChip.isChecked()){
                            sodiumChip.setChecked(false);
                        } else{
                            sodiumChip.setChecked(true);
                            sodiumChip.setCheckedIconVisible(true);
                        }
                    }
                });

        stressChip.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if(stressChip.isChecked()){
                            stressChip.setChecked(false);
                        } else{
                            stressChip.setChecked(true);
                            stressChip.setCheckedIconVisible(true);
                        }
                    }
                });

        exerciseChip.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if(exerciseChip.isChecked()){
                            exerciseChip.setChecked(false);
                        } else{
                            exerciseChip.setChecked(true);
                            exerciseChip.setCheckedIconVisible(true);
                        }
                    }
                });


        diastolic.setText(String.valueOf(entry.getDia_measurement()));
        systolic.setText(String.valueOf(entry.getSys_measurement()));

        //Create a listener to delete the data
        deleteBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Call<DeleteLogResponse> deleteLogResponseCall = ApiClient.getUserService().deleteLog(loadData("username"), entry.getTime_created());
                deleteLogResponseCall.enqueue(new Callback<DeleteLogResponse>() {
                    @Override
                    public void onResponse(Call<DeleteLogResponse> call, Response<DeleteLogResponse> response) {
                        ArrayList<Entry> logs = retrieveLogs();
                        System.out.println(logs);
                        logs.remove(entry);
                        storeLogs(logs);
                    }

                    @Override
                    public void onFailure(Call<DeleteLogResponse> call, Throwable t) {
                        ArrayList<Entry> logs = retrieveLogs();
                        System.out.println(logs);
                        logs.remove(entry);
                        storeLogs(logs);
                    }
                });

                Intent i = new Intent(BpDetailsActivity.this, BpHistoryActivity.class);
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                startActivity(i);

            }

        });

    }

    /**
     * TODO
     * @param Key
     * @return
     */
    public String loadData(String Key) {
        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
        return sharedPreferences.getString(Key, "");
    }

    /**
     * TODO
     * @param log
     */
    public void storeLogs(ArrayList<Entry> log){
        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        Gson gson = new Gson();
        String arr = gson.toJson(log);
        editor.putString("logs", arr);
        editor.commit();
    }

    /**
     * TODO
     * @return
     */
    public ArrayList<Entry> retrieveLogs(){
        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
        Gson gson = new Gson();
        String arr = sharedPreferences.getString("logs", null);
        Type type = new TypeToken<ArrayList<Entry>>() {}.getType();

        ArrayList<Entry> log = gson.fromJson(arr, type);

        if (log == null) {
            log = new ArrayList<Entry>();
        }

        return log;
    }
}